import torchvision
from tensorboardX import SummaryWriter
from torch import nn
from torch.utils.data import DataLoader


train_data=torchvision.datasets.CIFAR10(root="C:\\Users\\19336\\PycharmProjects\\pythonProject\\data",train=True,transform=torchvision.transforms.ToTensor(),download=True)
test_data=torchvision.datasets.CIFAR10(root="C:\\Users\\19336\\PycharmProjects\\pythonProject\\data",train=False,transform=torchvision.transforms.ToTensor(),download=True)
train_data_size=len(train_data)
test_data_size=len(test_data)
print(train_data_size)
print(test_data_size)
#利用dataloader加载数据集
train_dataloader=DataLoader(train_data,batch_size=64)
test_dataloader=DataLoader(test_data,batch_size=64)

#创建网络模型


class tu(nn.Module):
    def __init__(self):
        super(tu, self).__init__()
        self.model=nn.Sequential(
            nn.Conv2d(3,32,5,1,2),
            nn.MaxPool2d(2),
            nn.Conv2d(32,32,5,1,2),
            nn.MaxPool2d(2),
            nn.Conv2d(32,64,5,1,2),
            nn.MaxPool2d(2),
            nn.Flatten(),
            nn.Linear(64*4*4,64),
            nn.Linear(64,10)
        )
    def forward(self,x):
        x=self.model(x)
        return x

tu=tu()
tu.cuda()

#损失函数
loss_fn=nn.CrossEntropyLoss()
loss_fn=loss_fn.cuda()
#优化器
learning_rate=0.01
optimizer=torch.optim.SGD(tu.parameters(),lr=learning_rate)

#次数
total_train_step=0
total_test_step=0

epoch=10

writer=SummaryWriter("111")
for i in range(epoch):
    print("第{}轮开始".format(i+1))
    tu.train()
    for data in train_dataloader:
        imgs,targets=data
        imgs=imgs.cuda()
        targets=targets.cuda()
        outputs=tu(imgs)
        loss=loss_fn(outputs,targets)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        total_train_step=total_train_step+1
        if total_train_step%100==0:
            print("训练次数：{},loss:{}".format(total_train_step,loss))
            writer.add_scalar("train_loss",loss,total_train_step)


    tu.eval()
    toatal_test_loss=0
    total_accuracy=0
    with torch.no_grad():
        for data in test_dataloader:
            imgs,targets=data
            imgs = imgs.cuda()
            targets = targets.cuda()
            outputs=tu(imgs)
            loss=loss_fn(outputs,targets)
            toatal_test_loss = toatal_test_loss+loss.item()
            accuracy=(outputs.argmax(1)==targets).sum()
            total_accuracy =total_accuracy+accuracy
    print("整体测试的loss",toatal_test_loss)
    print("整体测试的正确率",total_accuracy/test_data_size)
    writer.add_scalar("11",toatal_test_loss,total_test_step)
    writer.add_scalar("test_accuracy",total_accuracy/test_data_size,total_test_step)
    total_test_step = total_test_step+1

    torch.save(tu,"tu_{}.pth".format(i))
    print("baocun")

writer.close()




